// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countTotalUsers = `-- name: CountTotalUsers :one
SELECT count(user_id) as total
FROM users
WHERE ($1::TEXT IS NULL OR $1::TEXT = '' OR email ILIKE '%' || $1::TEXT || '%')
`

func (q *Queries) CountTotalUsers(ctx context.Context, dollar_1 string) (int64, error) {
	row := q.db.QueryRow(ctx, countTotalUsers, dollar_1)
	var total int64
	err := row.Scan(&total)
	return total, err
}

const getUsers = `-- name: GetUsers :many
SELECT user_id, email, lock_end, lock_reason
FROM users
WHERE ($1::TEXT IS NULL OR $1::TEXT = '' OR email ILIKE '%' || $1::TEXT || '%')
ORDER BY created_at DESC
LIMIT NULLIF($2, 0)
OFFSET CASE WHEN $3::INT IS NULL OR $3::INT < 0 THEN 0 ELSE $3::INT END
`

type GetUsersParams struct {
	Column1 string
	Column2 interface{}
	Column3 int32
}

type GetUsersRow struct {
	UserID     pgtype.UUID
	Email      string
	LockEnd    pgtype.Timestamptz
	LockReason pgtype.Text
}

func (q *Queries) GetUsers(ctx context.Context, arg GetUsersParams) ([]GetUsersRow, error) {
	rows, err := q.db.Query(ctx, getUsers, arg.Column1, arg.Column2, arg.Column3)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUsersRow
	for rows.Next() {
		var i GetUsersRow
		if err := rows.Scan(
			&i.UserID,
			&i.Email,
			&i.LockEnd,
			&i.LockReason,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
