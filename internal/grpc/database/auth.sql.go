// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: auth.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getUserAuthInfo = `-- name: GetUserAuthInfo :many
SELECT
    rp.role_id,
    r.name          AS role_name,
    p.perm_id,
    p.name          AS perm_name,
    rc.resource_id,
    rc.name         AS resource_name,
    at.action_id,
    at.name         AS action_name
FROM role_permissions rp
JOIN roles r ON r.role_id = rp.role_id
JOIN permissions p ON p.perm_id = rp.perm_id
JOIN resources rc ON rc.resource_id = p.resource_id
JOIN permission_actions pa ON pa.perm_id = p.perm_id
JOIN actions at ON at.action_id = pa.action_id
WHERE rp.role_id = ANY($1::uuid[])
`

type GetUserAuthInfoRow struct {
	RoleID       pgtype.UUID
	RoleName     string
	PermID       pgtype.UUID
	PermName     string
	ResourceID   string
	ResourceName string
	ActionID     string
	ActionName   string
}

func (q *Queries) GetUserAuthInfo(ctx context.Context, dollar_1 []pgtype.UUID) ([]GetUserAuthInfoRow, error) {
	rows, err := q.db.Query(ctx, getUserAuthInfo, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserAuthInfoRow
	for rows.Next() {
		var i GetUserAuthInfoRow
		if err := rows.Scan(
			&i.RoleID,
			&i.RoleName,
			&i.PermID,
			&i.PermName,
			&i.ResourceID,
			&i.ResourceName,
			&i.ActionID,
			&i.ActionName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const hasPermission = `-- name: HasPermission :one
SELECT EXISTS (
    SELECT 1
    FROM role_permissions rp
    JOIN permissions p ON p.perm_id = rp.perm_id
    JOIN resources rc ON rc.resource_id = p.resource_id
    JOIN permission_actions pa ON pa.perm_id = p.perm_id
    JOIN actions at ON at.action_id = pa.action_id
    WHERE rp.role_id = ANY($1::uuid[])
      AND rc.name = $2
      AND at.name = $3
) AS has_permission
`

type HasPermissionParams struct {
	Column1 []pgtype.UUID
	Name    string
	Name_2  string
}

func (q *Queries) HasPermission(ctx context.Context, arg HasPermissionParams) (bool, error) {
	row := q.db.QueryRow(ctx, hasPermission, arg.Column1, arg.Name, arg.Name_2)
	var has_permission bool
	err := row.Scan(&has_permission)
	return has_permission, err
}

const insertExternalProvider = `-- name: InsertExternalProvider :one
INSERT INTO external_provider (sub, provider, user_id)
VALUES ($1, $2, $3)
RETURNING sub
`

type InsertExternalProviderParams struct {
	Sub      string
	Provider string
	UserID   pgtype.UUID
}

func (q *Queries) InsertExternalProvider(ctx context.Context, arg InsertExternalProviderParams) (string, error) {
	row := q.db.QueryRow(ctx, insertExternalProvider, arg.Sub, arg.Provider, arg.UserID)
	var sub string
	err := row.Scan(&sub)
	return sub, err
}

const insertUser = `-- name: InsertUser :one
INSERT INTO users (email, password_hash, last_login_at, avatar_url)
VALUES ($1, $2, $3, $4)
RETURNING user_id, email, created_at, updated_at, avatar_url
`

type InsertUserParams struct {
	Email        string
	PasswordHash string
	LastLoginAt  pgtype.Timestamptz
	AvatarUrl    pgtype.Text
}

type InsertUserRow struct {
	UserID    pgtype.UUID
	Email     string
	CreatedAt pgtype.Timestamptz
	UpdatedAt pgtype.Timestamptz
	AvatarUrl pgtype.Text
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (InsertUserRow, error) {
	row := q.db.QueryRow(ctx, insertUser,
		arg.Email,
		arg.PasswordHash,
		arg.LastLoginAt,
		arg.AvatarUrl,
	)
	var i InsertUserRow
	err := row.Scan(
		&i.UserID,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AvatarUrl,
	)
	return i, err
}

const updateUserAvatar = `-- name: UpdateUserAvatar :one
UPDATE users
SET avatar_url = $2, updated_at = NOW()
WHERE user_id = $1
RETURNING user_id, updated_at, avatar_url
`

type UpdateUserAvatarParams struct {
	UserID    pgtype.UUID
	AvatarUrl pgtype.Text
}

type UpdateUserAvatarRow struct {
	UserID    pgtype.UUID
	UpdatedAt pgtype.Timestamptz
	AvatarUrl pgtype.Text
}

func (q *Queries) UpdateUserAvatar(ctx context.Context, arg UpdateUserAvatarParams) (UpdateUserAvatarRow, error) {
	row := q.db.QueryRow(ctx, updateUserAvatar, arg.UserID, arg.AvatarUrl)
	var i UpdateUserAvatarRow
	err := row.Scan(&i.UserID, &i.UpdatedAt, &i.AvatarUrl)
	return i, err
}
