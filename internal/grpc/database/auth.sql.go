// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: auth.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const insertExternalProvider = `-- name: InsertExternalProvider :one
INSERT INTO external_provider (sub, provider, user_id)
VALUES ($1, $2, $3)
RETURNING sub
`

type InsertExternalProviderParams struct {
	Sub      string
	Provider string
	UserID   pgtype.UUID
}

func (q *Queries) InsertExternalProvider(ctx context.Context, arg InsertExternalProviderParams) (string, error) {
	row := q.db.QueryRow(ctx, insertExternalProvider, arg.Sub, arg.Provider, arg.UserID)
	var sub string
	err := row.Scan(&sub)
	return sub, err
}

const insertUser = `-- name: InsertUser :one
INSERT INTO users (email, password_hash, last_login_at)
VALUES ($1, $2, $3)
RETURNING user_id, email, created_at, updated_at
`

type InsertUserParams struct {
	Email        string
	PasswordHash string
	LastLoginAt  pgtype.Timestamptz
}

type InsertUserRow struct {
	UserID    pgtype.UUID
	Email     string
	CreatedAt pgtype.Timestamptz
	UpdatedAt pgtype.Timestamptz
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (InsertUserRow, error) {
	row := q.db.QueryRow(ctx, insertUser, arg.Email, arg.PasswordHash, arg.LastLoginAt)
	var i InsertUserRow
	err := row.Scan(
		&i.UserID,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
