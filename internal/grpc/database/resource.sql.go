// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: resource.sql

package database

import (
	"context"
)

const removeOldActions = `-- name: RemoveOldActions :exec
DELETE FROM actions
WHERE action_id NOT IN (
  SELECT action_id FROM unnest($1::TEXT[]) AS action_id
)
`

func (q *Queries) RemoveOldActions(ctx context.Context, dollar_1 []string) error {
	_, err := q.db.Exec(ctx, removeOldActions, dollar_1)
	return err
}

const removeOldResources = `-- name: RemoveOldResources :exec
DELETE FROM resources
WHERE resource_id NOT IN (
  SELECT resource_id FROM unnest($1::TEXT[]) AS resource_id
)
`

func (q *Queries) RemoveOldResources(ctx context.Context, dollar_1 []string) error {
	_, err := q.db.Exec(ctx, removeOldResources, dollar_1)
	return err
}

const upsertActions = `-- name: UpsertActions :exec
INSERT INTO actions (action_id, resource_id, name)
SELECT t1.action_id, t2.resource_id, t3.name
FROM unnest($1::TEXT[]) WITH ORDINALITY AS t1(action_id, ord)
JOIN unnest($2::TEXT[]) WITH ORDINALITY AS t2(resource_id, ord) USING (ord)
JOIN unnest($3::TEXT[]) WITH ORDINALITY AS t3(name, ord) USING (ord)
ON CONFLICT (action_id) DO UPDATE
SET resource_id = EXCLUDED.resource_id,
    name = EXCLUDED.name
`

type UpsertActionsParams struct {
	Column1 []string
	Column2 []string
	Column3 []string
}

func (q *Queries) UpsertActions(ctx context.Context, arg UpsertActionsParams) error {
	_, err := q.db.Exec(ctx, upsertActions, arg.Column1, arg.Column2, arg.Column3)
	return err
}

const upsertResources = `-- name: UpsertResources :exec
INSERT INTO resources (resource_id, name)
SELECT t1.resource_id, t2.name
FROM unnest($1::TEXT[]) WITH ORDINALITY AS t1(resource_id, ord)
JOIN unnest($2::TEXT[]) WITH ORDINALITY AS t2(name, ord) USING (ord)
ON CONFLICT (resource_id) DO UPDATE
SET name = EXCLUDED.name
`

type UpsertResourcesParams struct {
	Column1 []string
	Column2 []string
}

func (q *Queries) UpsertResources(ctx context.Context, arg UpsertResourcesParams) error {
	_, err := q.db.Exec(ctx, upsertResources, arg.Column1, arg.Column2)
	return err
}
