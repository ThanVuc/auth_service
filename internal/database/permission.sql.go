// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: permission.sql

package database

import (
	"context"
)

const getActions = `-- name: GetActions :many
select action_id, name
from actions
where resource_id = $1
`

type GetActionsRow struct {
	ActionID string
	Name     string
}

func (q *Queries) GetActions(ctx context.Context, resourceID string) ([]GetActionsRow, error) {
	rows, err := q.db.Query(ctx, getActions, resourceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetActionsRow
	for rows.Next() {
		var i GetActionsRow
		if err := rows.Scan(&i.ActionID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getResources = `-- name: GetResources :many
select resource_id, name
from resources
`

type GetResourcesRow struct {
	ResourceID string
	Name       string
}

func (q *Queries) GetResources(ctx context.Context) ([]GetResourcesRow, error) {
	rows, err := q.db.Query(ctx, getResources)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetResourcesRow
	for rows.Next() {
		var i GetResourcesRow
		if err := rows.Scan(&i.ResourceID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
